else if(T > 2 && T %% 2 == 0){
comppart = sqrt(1/2)*(randvec[1:(T/2-1)] + 1i*randvec[(T/2):(T-2)])
orthvec = c(randvec[T-1],comppart,randvec[T],Conj(rev(comppart)))}
else if(T > 2 && T %% 2 == 1){
comppart = sqrt(1/2)*(randvec[1:((T+1)/2-1)]+1i*randvec[((T+1)/2):(T-1)])
orthvec = c(randvec[T],comppart,Conj(rev(comppart)))}
else{
stop("T must be a positive integer!")
}
return(orthvec)
}
# set the grid of frequencies
nfreqs = 1024
omega = seq(-pi,pi,length.out = nfreqs)
# set lambda
lam = 0.9
# compute the spectral density on the frequency grid for this choice of lambda
specden = (1-lam^2)/(2*pi*(1-2*lam*cos(omega)+lam^2))
# plot the spectral density
plot(omega,specden,type='l',xlim=c(-pi,pi),ylim=c(0,1.1*max(specden)))
# define the vector of specific frequencies to explore
subomega = pi*c(1/16,1/8,1/4,1)
# define a vector of times
times = 1:100
# set lambda
lam = 0.9
# plot f(omega)*cos(omega*t) for each omega
par(mfrow=c(4,1))
for(j in 1:4){
multfac = sqrt((1-lam^2)/(2*pi*(1-2*lam*cos(subomega[j])+lam^2)))
plot(times,multfac*cos(subomega[j]*times),type='l',ylim=c(-1,1))
}
# plot f(omega)*cos(omega*t) for each omega
par(mfrow=c(4,1))
for(j in 1:4){
multfac = sqrt((1-lam^2)/(2*pi*(1-2*lam*cos(subomega[j])+lam^2)))
plot(times,multfac*cos(subomega[j]*times),type='l',ylim=c(-1,1))
}
T = 16
lam = 0.0
# now \omega has T elements from 0 to 2\pi(T-1)/T
omega = 2*pi/T*seq(0,T-1)
# define the square root of the spectral density
s = sqrt((1-lam^2)/(2*pi*(1-2*lam*cos(omega)+lam^2)))
plot(omega,s)
# this is the matrix M from the notes (shifted by pi)
M = exp(1i*outer(0:(T-1),omega,fun="*"))%*%diag(s)
# The function "genorthinc()" generates the orthogonal increment vector
# it takes into account the constrints needed to make M%*%genorthinc(T) real
# run this line of code several times to see what the time series vectors look like
plot(Re(sqrt(2*pi/T)*M%*%genorthinc(T)),type='l',ylim=c(-3,3))
T = 16
lam = 0.0
# now \omega has T elements from 0 to 2\pi(T-1)/T
omega = 2*pi/T*seq(0,T-1)
# define the square root of the spectral density
s = sqrt((1-lam^2)/(2*pi*(1-2*lam*cos(omega)+lam^2)))
plot(omega,s)
# this is the matrix M from the notes (shifted by pi)
M = exp(1i*outer(0:(T-1),omega,fun="*"))%*%diag(s)
# The function "genorthinc()" generates the orthogonal increment vector
# it takes into account the constrints needed to make M%*%genorthinc(T) real
# run this line of code several times to see what the time series vectors look like
plot(Re(sqrt(2*pi/T)*M%*%genorthinc(T)),type='l',ylim=c(-3,3))
T = 16
lam = 0.0
# now \omega has T elements from 0 to 2\pi(T-1)/T
omega = 2*pi/T*seq(0,T-1)
# define the square root of the spectral density
s = sqrt((1-lam^2)/(2*pi*(1-2*lam*cos(omega)+lam^2)))
plot(omega,s)
# this is the matrix M from the notes (shifted by pi)
M = exp(1i*outer(0:(T-1),omega,fun="*"))%*%diag(s)
# The function "genorthinc()" generates the orthogonal increment vector
# it takes into account the constrints needed to make M%*%genorthinc(T) real
# run this line of code several times to see what the time series vectors look like
plot(Re(sqrt(2*pi/T)*M%*%genorthinc(T)),type='l',ylim=c(-3,3))
T = 16
lam = 0.0
# now \omega has T elements from 0 to 2\pi(T-1)/T
omega = 2*pi/T*seq(0,T-1)
# define the square root of the spectral density
s = sqrt((1-lam^2)/(2*pi*(1-2*lam*cos(omega)+lam^2)))
plot(omega,s)
# this is the matrix M from the notes (shifted by pi)
M = exp(1i*outer(0:(T-1),omega,fun="*"))%*%diag(s)
# The function "genorthinc()" generates the orthogonal increment vector
# it takes into account the constrints needed to make M%*%genorthinc(T) real
# run this line of code several times to see what the time series vectors look like
plot(Re(sqrt(2*pi/T)*M%*%genorthinc(T)),type='l',ylim=c(-3,3))
T = 16
lam = 0.0
# now \omega has T elements from 0 to 2\pi(T-1)/T
omega = 2*pi/T*seq(0,T-1)
# define the square root of the spectral density
s = sqrt((1-lam^2)/(2*pi*(1-2*lam*cos(omega)+lam^2)))
plot(omega,s)
# this is the matrix M from the notes (shifted by pi)
M = exp(1i*outer(0:(T-1),omega,fun="*"))%*%diag(s)
# The function "genorthinc()" generates the orthogonal increment vector
# it takes into account the constrints needed to make M%*%genorthinc(T) real
# run this line of code several times to see what the time series vectors look like
plot(Re(sqrt(2*pi/T)*M%*%genorthinc(T)),type='l',ylim=c(-3,3))
T = 16
lam = 0.0
# now \omega has T elements from 0 to 2\pi(T-1)/T
omega = 2*pi/T*seq(0,T-1)
# define the square root of the spectral density
s = sqrt((1-lam^2)/(2*pi*(1-2*lam*cos(omega)+lam^2)))
plot(omega,s)
# this is the matrix M from the notes (shifted by pi)
M = exp(1i*outer(0:(T-1),omega,fun="*"))%*%diag(s)
# The function "genorthinc()" generates the orthogonal increment vector
# it takes into account the constrints needed to make M%*%genorthinc(T) real
# run this line of code several times to see what the time series vectors look like
plot(Re(sqrt(2*pi/T)*M%*%genorthinc(T)),type='l',ylim=c(-3,3))
sqrt(2*pi/T)*M%*%genorthinc(T)
T = 128
lam = 0.0
# now \omega has T elements from 0 to 2\pi(T-1)/T
omega = 2*pi/T*seq(0,T-1)
# define the square root of the spectral density
s = sqrt((1-lam^2)/(2*pi*(1-2*lam*cos(omega)+lam^2)))
plot(omega,s)
# this is the matrix M from the notes (shifted by pi)
M = exp(1i*outer(0:(T-1),omega,fun="*"))%*%diag(s)
# The function "genorthinc()" generates the orthogonal increment vector
# it takes into account the constrints needed to make M%*%genorthinc(T) real
# run this line of code several times to see what the time series vectors look like
# Throughout this, you'll see that I put the time series inside of Re(). It's not
# because we are ignoring the imaginary part. It's because the imaginary part is
# exactly zero, but maybe not numerically 0.
plot(Re(sqrt(2*pi/T)*M%*%genorthinc(T)),type='l',ylim=c(-3,3))
T = 128
lam = 0.9
# now \omega has T elements from 0 to 2\pi(T-1)/T
omega = 2*pi/T*seq(0,T-1)
# define the square root of the spectral density
s = sqrt((1-lam^2)/(2*pi*(1-2*lam*cos(omega)+lam^2)))
plot(omega,s)
# this is the matrix M from the notes (shifted by pi)
M = exp(1i*outer(0:(T-1),omega,fun="*"))%*%diag(s)
# The function "genorthinc()" generates the orthogonal increment vector
# it takes into account the constrints needed to make M%*%genorthinc(T) real
# run this line of code several times to see what the time series vectors look like
# Throughout this, you'll see that I put the time series inside of Re(). It's not
# because we are ignoring the imaginary part. It's because the imaginary part is
# exactly zero, but maybe not numerically 0.
plot(Re(sqrt(2*pi/T)*M%*%genorthinc(T)),type='l',ylim=c(-3,3))
orthvec = genorthinc(T)
# first plot what the end result will look like
plot(sqrt(2*pi/T)*Re(fft(orthvec*s,inverse=TRUE)),ylim=c(-3,3))
lines(sqrt(2*pi/T)*Re(fft(orthvec*s,inverse=TRUE)))
# this first term is the 0 frequency (the constant term)
partialsum = Re(sqrt(2*pi/T)*M[,1]*orthvec[1])
plot(partialsum,type='l',ylim=c(-3,3))
for( j in 2:(T/2)){
# add in the next frequency j, which has a conjugate pair at T-j+2
partialsum = partialsum + sqrt(2*pi/T)*( orthvec[j]*M[,j] + orthvec[T-j+2]*M[,T-j+2] )
plot(Re(partialsum),type='l',ylim=c(-3,3))
points(Re(partialsum))
# the framerate is slower for the low frequencies
Sys.sleep(time=0.2-j*0.2/(T/2))
}
# add in the highest frequency, which does not have a conjugate pair if T is even
partialsum = partialsum + sqrt(2*pi/T)*orthvec[T/2+1]*M[,T/2+1]
plot(Re(partialsum),type='l',ylim=c(-3,3))
points(Re(sqrt(2*pi/T)*M%*%orthvec))
# plot the approximate covariance matrix and the true covariance matrix
par(mfrow=c(1,3))
matapprox = Re(2*pi/T*M%*%Conj(t(M)))
mattrue = toeplitz(lam^(0:(T-1)))
#library(fields)
image(matapprox,col=heat.colors(T),xlim=c(1,0))
image(mattrue,col=heat.colors(T),xlim=c(1,0))
image(matapprox - mattrue,col=heat.colors(T),xlim=c(1,0))
T = 128
lam = 0.8
# now \omega has 2T elements from 0 to 2\pi(2T-1)/(2T)
omega = 2*pi/(2*T)*seq(0,2*T-1)
# define the square root of the spectral density
s = sqrt((1-lam^2)/(2*pi*(1-2*lam*cos(omega)+lam^2)))
# generate orthogonal increment vector of length 2*T
orthvec = genorthinc(2*T)
# compute the inverse DFT of orthvec*s
longtseries = sqrt(2*pi/(2*T))*(fft(orthvec*s,inverse=TRUE))
# out simulated time series is just the first T elements of
# the inverse DFT
tseries = longtseries[1:T]
# plot the simulation
plot(Re(tseries),ylim=c(-3,3))
lines(Re(tseries))
T = 128
lam = 0.8
# now \omega has 2T elements from 0 to 2\pi(2T-1)/(2T)
omega = 2*pi/(2*T)*seq(0,2*T-1)
# define the square root of the spectral density
s = sqrt((1-lam^2)/(2*pi*(1-2*lam*cos(omega)+lam^2)))
# generate orthogonal increment vector of length 2*T
orthvec = genorthinc(2*T)
# compute the inverse DFT of orthvec*s
longtseries = sqrt(2*pi/(2*T))*(fft(orthvec*s,inverse=TRUE))
# out simulated time series is just the first T elements of
# the inverse DFT
tseries = longtseries[1:T]
# plot the simulation
plot(Re(tseries),ylim=c(-3,3))
lines(Re(tseries))
# compute the covariance matrix for the approximation (matapprox1)
M2 = exp(1i*outer(0:(2*T-1),omega,fun="*"))%*%diag(s)
dim(M2)
matapprox2 = Re(2*pi/(2*T)*M2%*%Conj(t(M2)))
matapprox1 = matapprox2[1:T,1:T]
# and the cov matrix of the true process
mattrue = toeplitz(lam^(0:(T-1)))
# plot both of them and their difference
par(mfrow=c(1,3))
image(matapprox1,col=heat.colors(T),xlim=c(1,0))
image(mattrue,col=heat.colors(T),xlim=c(1,0))
image(matapprox1 - mattrue,col=heat.colors(T),xlim=c(1,0))
image(matapprox1,col=heat.colors(T),xlim=c(1,0),main=("Approximate"))
image(matapprox1 - mattrue,col=heat.colors(T),xlim=c(1,0),main="Difference")
image(matapprox1,col=heat.colors(T),xlim=c(1,0),main=("Approximate"))
image(matapprox1,col=heat.colors(T),xlim=c(1,0),main=("Approximate"))
image(mattrue,col=heat.colors(T),xlim=c(1,0),main=("Exact"))
image(matapprox1 - mattrue,col=heat.colors(T),xlim=c(1,0),main="Difference")
# notice now that there is no yellow in the corner of the approximate matrix
# you should still see some yellow in the corners, but now the values
# are much closer to zero. We should have a legend on these.
# set the length of the time series and \lambda
T = 128
lam = 0.8
# now \omega has 2T elements from 0 to 2\pi(2T-1)/(2T)
omega = 2*pi/(2*T)*seq(0,2*T-1)
# define the square root of the spectral density
s = sqrt((1-lam^2)/(2*pi*(1-2*lam*cos(omega)+lam^2)))
# generate orthogonal increment vector of length 2*T
orthvec = genorthinc(2*T)
# compute the inverse DFT of orthvec*s
longtseries = sqrt(2*pi/(2*T))*(fft(orthvec*s,inverse=TRUE))
# out simulated time series is just the first T elements of
# the inverse DFT
tseries = longtseries[1:T]
# plot the simulation
plot(Re(tseries),ylim=c(-3,3))
lines(Re(tseries))
# compute the covariance matrix for the approximation (matapprox1)
M2 = exp(1i*outer(0:(2*T-1),omega,fun="*"))%*%diag(s)
dim(M2)
matapprox2 = Re(2*pi/(2*T)*M2%*%Conj(t(M2)))
matapprox1 = matapprox2[1:T,1:T]
# and the cov matrix of the true process
mattrue = toeplitz(lam^(0:(T-1)))
# plot both of them and their difference
par(mfrow=c(1,3))
image(matapprox1,col=heat.colors(T),xlim=c(1,0),main="Approximate")
image(mattrue,col=heat.colors(T),xlim=c(1,0),main="Exact")
image(matapprox1 - mattrue,col=heat.colors(T),xlim=c(1,0),main="Difference")
# notice now that there is no yellow in the corner of the approximate matrix
# you should still see some yellow in the corners, but now the values
# are much closer to zero. We should have a legend on these.
a = 5
s = sqrt(1/(2*pi*besselI(2*a,nu=0)))*exp(a*cos(omega))
plot(omega,s,type='l')
orthvec = genorthinc(2*T)
# compute the inverse DFT of orthvec*s
longtseries = sqrt(2*pi/(2*T))*(fft(orthvec*s,inverse=TRUE))
# out simulated time series is just the first T elements of
# the inverse DFT
tseries = longtseries[1:T]
# plot the simulation
plot(Re(tseries),ylim=c(-3,3))
lines(Re(tseries))
a = 5
s = sqrt(1/(2*pi*besselI(2*a,nu=0)))*exp(a*cos(omega))
plot(omega,s,type='l')
orthvec = genorthinc(2*T)
# compute the inverse DFT of orthvec*s
longtseries = sqrt(2*pi/(2*T))*(fft(orthvec*s,inverse=TRUE))
# out simulated time series is just the first T elements of
# the inverse DFT
tseries = longtseries[1:T]
# plot the simulation
plot(Re(tseries),ylim=c(-3,3))
lines(Re(tseries))
a = 5
s = sqrt(1/(2*pi*besselI(2*a,nu=0)))*exp(a*cos(omega))
plot(omega,s,type='l')
T = 128
omega = 2*pi/(2*T)*seq(0,2*T-1)
a = 5
s = sqrt(1/(2*pi*besselI(2*a,nu=0)))*exp(a*cos(omega))
plot(omega,s,type='l')
orthvec = genorthinc(2*T)
# compute the inverse DFT of orthvec*s
longtseries = sqrt(2*pi/(2*T))*(fft(orthvec*s,inverse=TRUE))
# out simulated time series is just the first T elements of
# the inverse DFT
tseries = longtseries[1:T]
# plot the simulation
plot(Re(tseries),ylim=c(-3,3))
lines(Re(tseries))
T = 128
# We will use D*T terms in the discretization.
# Try some larger values for D. Go crazy with it.
lam = 0.9
# now \omega has D*T elements from 0 to 2\pi(2T-1)/(2T)
omega = 2*pi/(D*T)*seq(0,D*T-1)
# define the square root of the spectral density
s = sqrt((1-lam^2)/(2*pi*(1-2*lam*cos(omega)+lam^2)))
#a = 5
#s = sqrt(1/(2*pi*besselI(2*a,nu=0)))*exp(a*cos(omega))
# generate orthogonal increment vector of length 2*T
orthvec = genorthinc(D*T)
# compute the inverse DFT of orthvec*s
longtseries = sqrt(2*pi/(D*T))*(fft(orthvec*s,inverse=TRUE))
# out simulated time series is just the first T elements of
# the inverse DFT
tseries = longtseries[1:T]
# plot the simulation
plot(Re(tseries),ylim=c(-3,3))
lines(Re(tseries))
T = 128
# We will use D*T terms in the discretization.
# Try some larger values for D. Go crazy with it.
D = 2
lam = 0.9
# now \omega has D*T elements from 0 to 2\pi(2T-1)/(2T)
omega = 2*pi/(D*T)*seq(0,D*T-1)
# define the square root of the spectral density
s = sqrt((1-lam^2)/(2*pi*(1-2*lam*cos(omega)+lam^2)))
#a = 5
#s = sqrt(1/(2*pi*besselI(2*a,nu=0)))*exp(a*cos(omega))
# generate orthogonal increment vector of length 2*T
orthvec = genorthinc(D*T)
# compute the inverse DFT of orthvec*s
longtseries = sqrt(2*pi/(D*T))*(fft(orthvec*s,inverse=TRUE))
# out simulated time series is just the first T elements of
# the inverse DFT
tseries = longtseries[1:T]
# plot the simulation
plot(Re(tseries),ylim=c(-3,3))
lines(Re(tseries))
T = 8
finetime = seq(0,8,length.out=1000)
coarsetime = 0:8
# Try a bunch of different values for freq
# they don't have to be Fourier frequencies
# or even between 0 and 2*pi
freq = -2
# plot the two functions
plot(finetime,Re(exp(1i*freq*finetime)),type='l')
points(coarsetime,Re(exp(1i*freq*coarsetime)))
lines(finetime,Re(exp(1i*(freq+2*pi)*finetime)))
points(coarsetime,Re(exp(1i*(freq+2*pi)*coarsetime)))
phi = 1
alpha = 2
nu = 1/2
omega = seq(-6*pi,6*pi,length.out= 1000)
fmatern = phi/(alpha^2 + omega^2)^(nu+1/2)
plot(omega,fmatern,type='l',axes = F)
axis(1,at=seq(-6*pi,6*pi,length.out = 13),labels = c("-6pi","-5pi","-4pi","-3pi","-2pi","-pi","0","pi","2pi","3pi","4pi","5pi","6pi"))
axis(2)
phi = 1
alpha = 1
nu = 1/2
omegapi = seq(-pi,pi,length.out=1000)
N = 20
falias = phi/(alpha^2 + omegapi^2)^(nu+1/2)
plot(omegapi,falias,type='l',ylim = c(0,1.3))
for(n in 1:N){
falias = falias + phi/(alpha^2 + (omegapi+2*pi*n)^2)^(nu+1/2) +
phi/(alpha^2 + (omegapi-2*pi*n)^2)^(nu+1/2)
lines(omegapi,falias)
}
# try with different values of delta
phi = 1
alpha = 1
nu = 1/2
delta = 2
omegapidelta = seq(-pi/delta,pi/delta,length.out=1000)
N = 20
falias = phi/(alpha^2 + omegapidelta^2)^(nu+1/2)
# don't forget to change the ylim for different values of delta
plot(omegapidelta,falias,type='l',ylim = c(0,1.5))
for(n in 1:N){
falias = falias + phi/(alpha^2 + (omegapidelta+2*pi*n/delta)^2)^(nu+1/2) +
phi/(alpha^2 + (omegapidelta-2*pi*n/delta)^2)^(nu+1/2)
lines(omegapidelta,falias)
}
#setwd("/Users/jsguinne/Documents/research/carlik/code/ver2/")
setwd("S:/Documents/research/carlik/code/ver4/")
#install.packages("sp")
#install.packages("INLA", repos="http://www.math.ntnu.no/inla/R/stable")
library(sp)
library(INLA)
# red sea data
data = read.table('readseadatavec.txt',header=T)
coords = as.matrix(data[,1:2])
redsea.dom = cbind(c(20,100,310,310,-10,-10), c(-20,-20,300,480,220,0))
t1 = proc.time()[3]
#mesh2 = inla.mesh.2d(coords, max.edge = 1)
mesh2 = inla.mesh.2d(, redsea.dom, max.edge=2)
#plot(mesh2,asp=1,xlim=c(100,120),ylim=c(100,120))
#plot(mesh2,asp=1)
spde2 = inla.spde2.matern(mesh2,alpha=2)
A2 = inla.spde.make.A(mesh2, loc=coords)
stk2 = inla.stack(data=list(resp=data$aot), A=list(A2,1),
effects=list(i=1:spde2$n.spde,
m=rep(1,nrow(data))), tag='est')
#setwd("/Users/jsguinne/Documents/research/carlik/code/ver2/")
setwd("S:/Documents/research/carlik/code/ver4/")
#install.packages("sp")
#install.packages("INLA", repos="http://www.math.ntnu.no/inla/R/stable")
library(sp)
library(INLA)
# red sea data
data = read.table('readseadatavec.txt',header=T)
coords = as.matrix(data[,1:2])
redsea.dom = cbind(c(20,100,310,310,-10,-10), c(-20,-20,300,480,220,0))
t1 = proc.time()[3]
#mesh2 = inla.mesh.2d(coords, max.edge = 1)
mesh2 = inla.mesh.2d(, redsea.dom, max.edge=8)
#plot(mesh2,asp=1,xlim=c(100,120),ylim=c(100,120))
#plot(mesh2,asp=1)
spde2 = inla.spde2.matern(mesh2,alpha=2)
A2 = inla.spde.make.A(mesh2, loc=coords)
stk2 = inla.stack(data=list(resp=data$aot), A=list(A2,1),
effects=list(i=1:spde2$n.spde,
m=rep(1,nrow(data))), tag='est')
dim(inla.stack.A(stk2))
res2 <- inla(resp ~ 0 + m + f(i, model=spde2),
data=inla.stack.data(stk2),
control.predictor=list(A=inla.stack.A(stk2)),verbose=TRUE)
t2 = proc.time()[3]
(t2-t1)/60
summary(res2)
res2.field <- inla.spde2.result(res2, 'i', spde2, do.transf=TRUE)
muhat = res2$summary.fixed[[6]] # muhat
tausqhat = inla.mmarginal(res2.field$marginals.tau[[1]] )^2 # tau
kappasqhat = inla.mmarginal(res2.field$marginals.kappa[[1]] )^2 # kappa
nughat = 1/res2$summary.hy[1,6]*tausqhat # 1/\sigma_\varepsilon^2
muhat
tausqhat
kappasqhat
nughat
sqrt(kappasqhat)
# red sea data
data = read.table('readseadatavec.txt',header=T)
coords = as.matrix(data[,1:2])
redsea.dom = cbind(c(20,100,310,310,-10,-10), c(-20,-20,300,480,220,0))
t1 = proc.time()[3]
#mesh2 = inla.mesh.2d(coords, max.edge = 1)
mesh2 = inla.mesh.2d(, redsea.dom, max.edge=6)
#plot(mesh2,asp=1,xlim=c(100,120),ylim=c(100,120))
#plot(mesh2,asp=1)
spde2 = inla.spde2.matern(mesh2,alpha=2)
A2 = inla.spde.make.A(mesh2, loc=coords)
stk2 = inla.stack(data=list(resp=data$aot), A=list(A2,1),
effects=list(i=1:spde2$n.spde,
m=rep(1,nrow(data))), tag='est')
dim(inla.stack.A(stk2))
res2 <- inla(resp ~ 0 + m + f(i, model=spde2),
data=inla.stack.data(stk2),
control.predictor=list(A=inla.stack.A(stk2)),verbose=TRUE)
t2 = proc.time()[3]
(t2-t1)/60
summary(res2)
res2.field <- inla.spde2.result(res2, 'i', spde2, do.transf=TRUE)
muhat = res2$summary.fixed[[6]] # muhat
tausqhat = inla.mmarginal(res2.field$marginals.tau[[1]] )^2 # tau
kappasqhat = inla.mmarginal(res2.field$marginals.kappa[[1]] )^2 # kappa
nughat = 1/res2$summary.hy[1,6]*tausqhat # 1/\sigma_\varepsilon^2
muhat
tausqhat
kappasqhat
nughat
setwd("S:/Documents/research/carlik/code/codeforjcgs/")
#install.packages("sp")
#install.packages("INLA", repos="http://www.math.ntnu.no/inla/R/stable")
library(sp)
library(INLA)
# red sea data
data = read.table('readseadatavec.txt',header=T)
coords = as.matrix(data[,1:2])
redsea.dom = cbind(c(20,100,310,310,-10,-10), c(-20,-20,300,480,220,0))
t1 = proc.time()[3]
#mesh2 = inla.mesh.2d(coords, max.edge = 1)
mesh2 = inla.mesh.2d(, redsea.dom, max.edge=6)
#plot(mesh2,asp=1,xlim=c(100,120),ylim=c(100,120))
#plot(mesh2,asp=1)
spde2 = inla.spde2.matern(mesh2,alpha=2)
A2 = inla.spde.make.A(mesh2, loc=coords)
stk2 = inla.stack(data=list(resp=data$aot), A=list(A2,1),
effects=list(i=1:spde2$n.spde,
m=rep(1,nrow(data))), tag='est')
dim(inla.stack.A(stk2))
res2 <- inla(resp ~ 0 + m + f(i, model=spde2),
data=inla.stack.data(stk2),
control.predictor=list(A=inla.stack.A(stk2)),verbose=TRUE)
t2 = proc.time()[3]
(t2-t1)/60
summary(res2)
res2.field <- inla.spde2.result(res2, 'i', spde2, do.transf=TRUE)
muhat = res2$summary.fixed[[6]] # muhat
tausqhat = inla.mmarginal(res2.field$marginals.tau[[1]] )^2 # tau
kappasqhat = inla.mmarginal(res2.field$marginals.kappa[[1]] )^2 # kappa
nughat = 1/res2$summary.hy[1,6]*tausqhat # 1/\sigma_\varepsilon^2
muhat
tausqhat
kappasqhat
nughat
